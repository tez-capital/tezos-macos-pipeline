name: Setup OCaml on macOS M1

on:
  push:

env:
  TEZOS_VERSION: octez-v22.0
  RUST_VERSION: "1.77.2"

jobs:
  setup-and-clone:
    runs-on: macos-14  # or use macos-13 if 14 is not available/stable
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install curl wget

      - name: Set-up OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.1

      - name: Build dependencies
        run: |
          export OPAMFETCHER=curl
          git clone https://gitlab.com/tezos/tezos.git 
          cd tezos
          git reset --hard $TEZOS_VERSION

          # init
          opam init --bare -a --disable-sandboxing --criteria="-removed,-count[version-lag:latest],-changed"
          eval $(opam env)
          wget -O latest-release:version.sh https://gitlab.com/tezos/tezos/raw/latest-release/scripts/version.sh
          source latest-release:version.sh
          opam switch create for_tezos $ocaml_version
          eval $(opam env)
          # opam install -y opam-depext
          # opam depext -y conf-rust-2021
          # opam install -y conf-rust-2021
          
          brew uninstall rust
          wget https://sh.rustup.rs/rustup-init.sh
          chmod +x rustup-init.sh
          ./rustup-init.sh --profile minimal --default-toolchain $RUST_VERSION -y
          . $HOME/.cargo/env
          eval $(opam env)

          # # zstd
          # git clone https://github.com/facebook/zstd.git
          # cd zstd/build/cmake
          # cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=$(pwd)/../../../zstd-local .
          # make install
          # cd ../../..

          # # hidapi
          # git clone https://github.com/libusb/hidapi.git
          # cd hidapi
          # mkdir build && cd build
          # cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=$(pwd)/../../hidapi-static
          # make
          # cd ../..

          # # base
          # wget https://github.com/janestreet/base/archive/refs/tags/v0.16.3.tar.gz
          # tar xzf v0.16.3.tar.gz
          # sed -i.bak '/(:include mpopcnt\.sexp)/d' base-0.16.3/src/dune
          # opam pin add -y base.v0.16.3 ./base-0.16.3


          # # findlib
          # wget https://github.com/ocaml/ocamlfind/archive/refs/tags/findlib-1.9.6.tar.gz
          # tar xzf findlib-1.9.6.tar.gz
          # cd ocamlfind-findlib-1.9.6
          # ./configure
          # make
          # make all
          # cd ..
          # opam pin add -y ocamlfind ./ocamlfind-findlib-1.9.6

          # # patch flags and remove dynlib
          # mv /opt/homebrew/opt/openssl@3/lib/libssl.3.dylib /opt/homebrew/opt/openssl@3/lib/libssl.3.dylib.bak
          # mv /opt/homebrew/opt/openssl@3/lib/libcrypto.3.dylib /opt/homebrew/opt/openssl@3/lib/libcrypto.3.dylib.bak
          # mv /opt/homebrew/opt/gmp/lib/libgmp.10.dylib /opt/homebrew/opt/gmp/lib/libgmp.10.dylib.bak
          # mv /opt/homebrew/opt/gmp/lib/libgmpxx.4.dylib /opt/homebrew/opt/gmp/lib/libgmpxx.4.dylib.bak

          # sed -i.bak '/\[.*%{system}.*macosx.*framework Security/{
          # r /dev/stdin
          # d
          # }' dune <<'EOF'
          #     "[ '%{system}' = 'macosx' ] && echo '(
          #   -ccopt -I/opt/homebrew/opt/openssl@3/include
          #   -ccopt -L/opt/homebrew/opt/openssl@3/lib
          #   -ccopt -Wl,-force_load,/opt/homebrew/opt/openssl@3/lib/libssl.a
          #   -ccopt -Wl,-force_load,/opt/homebrew/opt/openssl@3/lib/libcrypto.a

          #   -ccopt -I/opt/homebrew/opt/gmp/include
          #   -ccopt -L/opt/homebrew/opt/gmp/lib
          #   -ccopt -Wl,-force_load,/opt/homebrew/opt/gmp/lib/libgmp.a
          #   -ccopt -Wl,-force_load,/opt/homebrew/opt/gmp/lib/libgmpxx.a

          #   -ccopt -I/Users/runner/work/tezos-macos-pipeline/tezos-macos-pipeline/tezos/zstd-local/include
          #   -ccopt -L/Users/runner/work/tezos-macos-pipeline/tezos-macos-pipeline/tezos/zstd-local/lib
          #   -ccopt -Wl,-force_load,/Users/runner/work/tezos-macos-pipeline/tezos-macos-pipeline/tezos/std-local/lib/libzstd.a

          #   -ccopt -Wl,-search_paths_first
          #   -ccopt -Wl,-no_compact_unwind
          #   -ccopt -Wl,-why_load
          #   -ccopt \"-framework Security\")' || echo '()'"))))
          # EOF

          # tezos
          echo "Building Tezos with OCaml version: $ocaml_version"
          eval $(opam env)
          
          make build-deps
          eval $(opam env)
          make octez-layer1

