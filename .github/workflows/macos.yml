name: Setup OCaml on macOS M1

on:
  push:

env:
  TEZOS_VERSION: octez-v22.0
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  setup-and-clone:
    runs-on: macos-15  # or use macos-13 if 14 is not available/stable
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install curl wget rsync ocaml dune opam postgresql@15

#      - name: Set-up OCaml
#        uses: ocaml/setup-ocaml@v3
#        with:
#          ocaml-compiler: 5.2.1
#          cache-prefix: aaaaa
#          opam-pin: false

      - name: Build dependencies
        run: |
          #export OPAMFETCHER=curl
          export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"
          echo "user = \"${GITHUB_ACTOR:-github-actions}:${GITHUB_TOKEN}\"" >> ~/.curlrc

          git clone https://gitlab.com/tezos/tezos.git 
          cd tezos
          git reset --hard $TEZOS_VERSION

          source scripts/version.sh
          brew uninstall rust || true
          wget https://sh.rustup.rs/rustup-init.sh
          chmod +x rustup-init.sh
          ./rustup-init.sh --profile minimal --default-toolchain $recommended_rust_version -y
          . $HOME/.cargo/env

          # init
          opam init --bare -a --disable-sandboxing
          eval $(opam env)
          rm -rf /workspace/_build /workspace/_opam
          eval $(opam env)
          brew link postgresql@15
          eval $(opam env)
          make build-deps || echo failed 
          eval $(opam env)
          
          # findlib
          wget https://github.com/ocaml/ocamlfind/archive/refs/tags/findlib-1.9.6.tar.gz
          tar xzf findlib-1.9.6.tar.gz
          cd ocamlfind-findlib-1.9.6
          ./configure 
          make clean
          make
          make all
          cd ..
          opam pin add -y ocamlfind ./ocamlfind-findlib-1.9.6

          make build-deps
          exit 0
          

          eval $(opam env)
          # opam install . --deps-only --with-test
          eval $(opam env)

          # zstd
          git clone https://github.com/facebook/zstd.git
          cd zstd/build/cmake
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=$(pwd)/../../../zstd-local .
          make install
          cd ../../..

          # hidapi
          git clone https://github.com/libusb/hidapi.git
          cd hidapi
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=$(pwd)/../../hidapi-static
          make
          cd ../..

          # base
          wget https://github.com/janestreet/base/archive/refs/tags/v0.16.3.tar.gz
          tar xzf v0.16.3.tar.gz
          sed -i.bak '/(:include mpopcnt\.sexp)/d' base-0.16.3/src/dune
          opam pin add -y base.v0.16.3 ./base-0.16.3


          

          # # patch flags and remove dynlib
          mv /opt/homebrew/opt/openssl@3/lib/libssl.3.dylib /opt/homebrew/opt/openssl@3/lib/libssl.3.dylib.bak
          mv /opt/homebrew/opt/openssl@3/lib/libcrypto.3.dylib /opt/homebrew/opt/openssl@3/lib/libcrypto.3.dylib.bak
          mv /opt/homebrew/opt/gmp/lib/libgmp.10.dylib /opt/homebrew/opt/gmp/lib/libgmp.10.dylib.bak
          mv /opt/homebrew/opt/gmp/lib/libgmpxx.4.dylib /opt/homebrew/opt/gmp/lib/libgmpxx.4.dylib.bak

          sed -i.bak '/\[.*%{system}.*macosx.*framework Security/{
          r /dev/stdin
          d
          }' dune <<'EOF'
              "[ '%{system}' = 'macosx' ] && echo '(
            -ccopt -I/opt/homebrew/opt/openssl@3/include
            -ccopt -L/opt/homebrew/opt/openssl@3/lib
            -ccopt -Wl,-force_load,/opt/homebrew/opt/openssl@3/lib/libssl.a
            -ccopt -Wl,-force_load,/opt/homebrew/opt/openssl@3/lib/libcrypto.a

            -ccopt -I/opt/homebrew/opt/gmp/include
            -ccopt -L/opt/homebrew/opt/gmp/lib
            -ccopt -Wl,-force_load,/opt/homebrew/opt/gmp/lib/libgmp.a
            -ccopt -Wl,-force_load,/opt/homebrew/opt/gmp/lib/libgmpxx.a

            -ccopt -I/Users/runner/work/tezos-macos-pipeline/tezos-macos-pipeline/tezos/zstd-local/include
            -ccopt -L/Users/runner/work/tezos-macos-pipeline/tezos-macos-pipeline/tezos/zstd-local/lib
            -ccopt -Wl,-force_load,/Users/runner/work/tezos-macos-pipeline/tezos-macos-pipeline/tezos/std-local/lib/libzstd.a

            -ccopt -Wl,-search_paths_first
            -ccopt -Wl,-no_compact_unwind
            -ccopt -Wl,-why_load
            -ccopt \"-framework Security\")' || echo '()'"))))
          EOF
          
          # tezos
          # opam remove conf-rust-2021 --yes || true
          # opam pin remove conf-rust-2021 --yes || true
          # rm -rf ~/.opam/download-cache/conf-rust-2021* || true

          # opam pin add conf-rust-2021 -k version 1 --yes
          # opam pin add conf-rust -k version 0.1 --yes
          # opam option depext=false

          sed -i.bak '/OPAMASSUMEDEPEXTS=true opam install conf-rust conf-rust-2021/d' scripts/install_build_deps.sh

          echo "Building Tezos with OCaml version: $ocaml_version"
          brew link postgresql@15
          eval $(opam env)
          
          # opam install . --criteria="-removed,-count[version-lag:version-lag,solution]"
          # eval $(opam env)
          
           # for i in {1..5}; do
            make build-deps # && break || sleep 10
          #  done
          eval $(opam env)
          make octez-layer1

